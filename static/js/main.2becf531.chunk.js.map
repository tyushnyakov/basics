{"version":3,"sources":["components/Auth.js","components/ContactsItem.js","components/AddContact.js","components/Contacts.js","App.js","index.js"],"names":["Auth","useState","users","setUsers","isLogged","setIsLogged","useEffect","fetch","then","res","json","result","useForm","register","handleSubmit","to","className","onSubmit","data","forEach","elem","login","password","alert","type","name","ref","value","ContactsItem","props","isUpdatable","setIsUpdatable","e","requestOptions","method","headers","body","JSON","stringify","id","console","log","catch","err","finally","target","reset","contact","placeholder","surname","email","onClick","AddContact","Contacts","error","setError","isLoaded","setIsLoaded","contacts","setContacts","searchData","setSearchData","filter","item","message","map","key","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2becf531.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Auth.css';\nimport {useForm} from 'react-hook-form';\nimport {Redirect} from \"react-router-dom\";\n\nfunction Auth() {\n\n    const [users, setUsers] = useState([]);\n    const [isLogged, setIsLogged] = useState(false);\n\n    useEffect(() => {\n        fetch(\"https://my-json-server.typicode.com/tyushnyakov/contacts/users\")\n            .then(res => res.json())\n            .then(result => setUsers(result))\n    }, []) \n\n    const {register, handleSubmit} = useForm();\n    const onSubmit = (data) => {\n        users.forEach((elem) => {\n            if (elem.login === data.login && elem.password === data.password) {\n                setIsLogged(true);    \n            } else {\n            alert(\"Неверный логин или пароль\");\n            }\n        })\n    }  \n\n    if (isLogged) {\n      return (<Redirect to=\"/contacts\" />);    \n    } \n    return (\n        <div className=\"auth\">\n          <h1>ВХОД В ЛИЧНЫЙ КАБИНЕТ</h1>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            Login: <input type=\"text\" name=\"login\" ref={register}></input>\n            Password: <input type=\"password\" name=\"password\" ref={register}></input>\n            <input type=\"submit\" value=\"ВОЙТИ\"/>\n          </form>\n        </div> \n    );\n}\n\nexport default Auth;","import React, { useState } from 'react';\nimport './ContactsItem.css';\nimport {useForm} from 'react-hook-form';\n\nfunction ContactsItem(props) {\n\n    const [isUpdatable, setIsUpdatable] = useState(false);\n\n    function deleteItem() {\n        fetch(\"https://my-json-server.typicode.com/tyushnyakov/contacts/contacts/\" + props.contact.id, {\n            method: \"DELETE\",\n        });\n    }\n\n    const {register, handleSubmit} = useForm();\n    const onSubmit = (data, e) => {\n        const requestOptions = {\n            method: 'PATCH',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(data)\n            };\n        fetch(\"https://my-json-server.typicode.com/tyushnyakov/contacts/contacts/\"\n         + props.id, requestOptions)\n            .then(res => console.log(res))\n            .catch(err => console.log(err))\n            .finally(() => setIsUpdatable(false));\n            e.target.reset();\n    }\n\n    if (isUpdatable) {\n        return (\n            <div className=\"contact-wrapper\" > \n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"contacts-item\">\n                        <p>{props.contact.id}</p>\n                        <input type=\"text\" placeholder={props.contact.name} name=\"name\" ref={register}></input>    \n                        <input type=\"text\" placeholder={props.contact.surname} name=\"surname\" ref={register}></input>    \n                        <input type=\"email\" placeholder={props.contact.email} name=\"email\" ref={register}></input>    \n                        <input type=\"submit\" value=\"Обновить контакт\" />   \n                    </div>\n                </form>   \n            </div>\n        );\n    } else {\n        return (\n            <div className=\"contact-wrapper\">\n                <div className=\"contacts-item\">\n                    <p>{props.contact.id}</p>\n                    <p>{props.contact.name} {props.contact.surname}</p>\n                    <p>{props.contact.email}</p>\n                    <div>\n                        <button onClick={deleteItem}>Удалить</button >\n                        <button onClick={() => setIsUpdatable(true)}>Редактировать</button >\n                    </div>        \n                </div>  \n            </div>\n        );  \n    }\n}\n\nexport default ContactsItem;","import React from 'react';\nimport './AddContact.css';\nimport {useForm} from 'react-hook-form';\n\nfunction AddContact() {\n\n    const {register, handleSubmit} = useForm();\n    const onSubmit = (data, e) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(data)\n            };\n        fetch(\"https://my-json-server.typicode.com/tyushnyakov/contacts/contacts\", requestOptions)\n            .then(res => console.log(res))\n            .catch(err => console.log(err));\n            e.target.reset();    \n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"add-wrapper\">\n                    <input type=\"text\" placeholder=\"Имя\" name=\"name\" ref={register}></input>\n                    <input type=\"text\" placeholder=\"Фамилия\" name=\"surname\" ref={register}></input>\n                    <input type=\"email\" placeholder=\"e-mail\" name=\"email\" ref={register}></input>\n                    <input type=\"submit\" value=\"Добавить контакт\" />   \n                </div>\n                \n            </form>   \n        </div>\n    );\n}\n\nexport default AddContact;","import React, { useState, useEffect } from 'react';\nimport './Contacts.css';\nimport ContactsItem from './ContactsItem';\nimport AddContact from './AddContact';\nimport {useForm} from 'react-hook-form';\n\nfunction Contacts() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [contacts, setContacts] = useState([]);\n    const [searchData, setSearchData] = useState({});\n\n    useEffect(() => {\n        fetch(\"https://my-json-server.typicode.com/tyushnyakov/contacts/contacts\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setIsLoaded(true);\n                    setContacts(result);\n                },\n                (error) => {\n                    setIsLoaded(true);\n                    setError(error);\n                }\n            )\n    }, [])\n\n    useEffect(() => {\n        if (searchData.name)\n        setContacts(contacts.filter((item) => (item.name + \" \" + item.surname) === searchData.name))\n    }, [searchData, contacts])\n\n    const {register, handleSubmit} = useForm();\n    const onSubmit = (data, e) => {\n        setSearchData(data);\n        e.target.reset();\n    };\n\n    if (error) {\n        return <div>Ошибка: {error.message}</div>\n    } else if (!isLoaded) {\n        return <div>Загрузка...</div>\n    } else {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"header\">\n                    <h2>КОНТАКТЫ</h2>\n                    <div className=\"search\">\n                        <form onSubmit={handleSubmit(onSubmit)}>\n                            <div className=\"search-wrapper\">\n                                <input type=\"search\" name=\"name\" ref={register}></input>\n                                <imput type=\"submit\" value=\"Поиск\"/>\n                                Поиск\n                            </div>\n                        </form>    \n                    </div>\n                </div>\n                <AddContact />\n                <ul>\n                    {contacts.map((contact) => \n                        <li><ContactsItem key={contact.id} contact={contact} /></li>)\n                    }\n                </ul>                \n            </div>\n        );\n    }\n}\n\nexport default Contacts;","import React from 'react';\nimport './App.css';\nimport Auth from './components/Auth';\nimport Contacts from './components/Contacts';\nimport {BrowserRouter as Router, Route, Switch, Link} from \"react-router-dom\";\n\nfunction App() {\n\n  return (\n    <Router>\n      <header className=\"App-header\">    \n        <Link to=\"/auth\"><h1>CONTACTS</h1></Link>    \n      </header>\n      <Switch>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Route path=\"/contacts\">\n          <Contacts />\n        </Route>\n      </Switch>\n    </Router>    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}